on:
  workflow_dispatch:
  push:
    branches: [ master, add/gh-action-prod ]

name: Deploy Production CGK
jobs:
  build:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'  # Specify your Node.js version

      - name: Check Node.js Version
        run: node --version
        
  version-tag:
    name: Git Version Tagging
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      publish_docs: ${{ steps.check_commit.outputs.publish_docs }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Determine if rerun
        id: check_rerun
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "This is a rerun"
            echo "::set-output name=rerun::true"
          else
            echo "This is a fresh run"
            echo "::set-output name=rerun::false"
          fi

      - name: Create Version Tagging
        if: steps.check_rerun.outputs.rerun == 'false'
        id: version
        uses: codacy/git-version@2.7.0
        with:
          prefix: "v"
          major-identifier: "break:"
          minor-identifier: "feat:"

      - name: Get Previous Tag
        if: steps.check_rerun.outputs.rerun == 'false'
        id: previous-tag
        run: |
          git fetch --tags
          PREVIOUS_TAG=$(git describe --tags --abbrev=0)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Push Tagging
        if: steps.check_rerun.outputs.rerun == 'false'
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.version.outputs.version }}',
              sha: context.sha
            })

      - name: Create release notes
        if: steps.check_rerun.outputs.rerun == 'false'
        uses: actions/github-script@v4.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.request('POST /repos/${{github.repository}}/releases', {
              tag_name: '${{ steps.version.outputs.version }}',
              generate_release_notes: true
            })

      - name: Check commit message for feat or break
        id: check_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          if echo "$COMMIT_MESSAGE" | grep -E "feat:|break:"; then
            echo "Publish docs to Confluence"
            echo "::set-output name=publish_docs::true"
          else
            echo "Do not publish docs to Confluence"
            echo "::set-output name=publish_docs::false"
          fi

  create-confluence-page:
    runs-on: ubuntu-latest
    needs: [ build, version-tag ]
    if: needs.version-tag.outputs.publish_docs == 'true'
    steps:
      - name: Get Release
        id: get-release
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ needs.version-tag.outputs.version }}';
            const release = await github.rest.repos.getReleaseByTag({
              owner: '${{ github.repository_owner }}',
              repo: '${{ github.event.repository.name }}',
              tag: tag
            });
            if (!release || !release.data.body) {
                console.error('Invalid release');
                return;
            }
            console.log(release.data.body);
            return {
                body: release.data.body,
                url: `https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/tag/${tag}`
            };
  
      - name: Post Release Notes to Confluence
        id: post_to_confluence
        shell: bash
        env:
          RELEASE_NOTES: ${{ fromJSON(steps.get-release.outputs.result).body }}
          RELEASE_URL: ${{ fromJSON(steps.get-release.outputs.result).url }}
        run: |
          # Add additional line before the content
          RELEASE_NOTES="âœ… New *${{ github.event.repository.name }}* Release [${{ needs.version-tag.outputs.version }}](${RELEASE_URL}) $(date)\n\n${RELEASE_NOTES}"
  
          # Remove '##' from RELEASE_NOTES
          RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed 's/## //g')
  
          # Remove extra HTML
          RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's/<[^>]*>//g')
  
          # Replace markdown links with confluence links
          RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's/\[([^]]+)\]\(([^)]+)\)/[\1|\2]/g')
  
          # Replace @username with a link to the user's GitHub profile
          RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed -r 's/@([^ ]+)/[@\1|https:\/\/github.com\/\1]/g')
  
          # Replace '\n' with '<br/>'
          RELEASE_NOTES=$(echo -e "${RELEASE_NOTES}" | sed 's/\\n/<br\/>/g')
  
          # Prepare the payload
          payload=$(jq -n \
          --arg spaceId "163842" \
          --arg status "current" \
          --arg title "Release: ${{ needs.version-tag.outputs.version }}" \
          --arg parentId "163998" \
          --arg value "$RELEASE_NOTES" \
          '{
              "spaceId": $spaceId,
              "status": $status,
              "title": $title,
              "parentId": $parentId,
              "body": {
              "representation": "wiki",
              "value": $value
              }
          }'
          )
  
          echo "Payload: $payload"
          response=$(curl --request POST \
              --url 'https://agrim.atlassian.net/wiki/api/v2/pages' \
              --user '${{ vars.CONFLUENCE_EMAIL }}:${{ secrets.CONFLUENCE_API_TOKEN }}' \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --data "$payload")
          echo "Response: $response"
          pageId=$(echo "$response" | jq -r '.id')
          echo "Page ID: $pageId"
          if [ "$pageId" == "null" ]; then
            echo "Failed to create page"
            exit 1
          fi
          echo "pageId=$pageId" >> $GITHUB_ENV
