on:
  workflow_dispatch:
  push:
    branches: [ master, add/gh-action-prod ]

name: Deploy Production CGK

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Check Node.js Version
        run: node --version

  version-tag:
    needs: build
    name: Git Version Tagging
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-tagging.outputs.version }}
      publish_docs: ${{ steps.check_commits.outputs.publish_docs }}
      append_notes: ${{ steps.check_commits.outputs.append_notes }}
      commit_details: ${{ steps.check_commits.outputs.commit_details }}
    steps:
      - name: Check if previous run was successful
        id: check_previous_run
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: '110421663',
              branch: context.ref.replace('refs/heads/', ''),
              event: "push"
            });
            const lastRun = runs.data.workflow_runs.find(run => run.id !== context.runId);
            if (lastRun && lastRun.conclusion === "success") {
              core.setOutput("skip_tagging", "true");
            } else {
              core.setOutput("skip_tagging", "false");
            }
      
      - name: Version Tagging
        if: steps.check_previous_run.outputs.skip_tagging == 'false'
        id: version-tagging
        uses: Agrim-V/qoala-tools/actions/version-tagging@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Check commit messages for keywords
        if: steps.check_previous_run.outputs.skip_tagging == 'false'
        id: check_commits
        run: |
          PUBLISH_DOCS=false
          APPEND_NOTES=false
          COMMIT_DETAILS=""
          for COMMIT in $(git rev-list ${{ github.event.before }}..${{ github.sha }}); do
            COMMIT_MESSAGE=$(git log -1 --pretty=%s $COMMIT)
            COMMIT_DETAILS="${COMMIT_DETAILS}\n- ${COMMIT_MESSAGE}"
            if echo "$COMMIT_MESSAGE" | grep -E "feat:|break:"; then
              PUBLISH_DOCS=true
            fi
            if echo "$COMMIT_MESSAGE" | grep -E "fix:"; then
              APPEND_NOTES=true
            fi
          done
          COMMIT_DETAILS=$(echo -e "$COMMIT_DETAILS" | sed '/^$/d' | sed 's/,/\\,/g' | sed 's/:/\\:/g')
          echo "::set-output name=publish_docs::$PUBLISH_DOCS"
          echo "::set-output name=append_notes::$APPEND_NOTES"
          echo "::set-output name=commit_details::$(echo "$COMMIT_DETAILS" | sed ':a;N;$!ba;s/\n/\\n/g')"
          echo "::set-output name=version::${{ steps.version-tagging.outputs.version }}"
          echo "version=${{ steps.version-tagging.outputs.version }}"
          echo "publish_docs=$PUBLISH_DOCS"
          echo "append_notes=$APPEND_NOTES"
          echo "commit_details=$COMMIT_DETAILS"
        shell: bash

  create-confluence-page:
    runs-on: ubuntu-latest
    needs: version-tag
    if: needs.version-tag.outputs.publish_docs == 'true'
    steps: 
      - name: Create confluence page
        uses: Agrim-V/qoala-tools/actions/create-confluence-page@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          confluence-email: ${{ vars.CONFLUENCE_EMAIL }}
          confluence-api-token: ${{ secrets.CONFLUENCE_API_TOKEN }}
          confluence-url: 'https://agrim.atlassian.net'
          confluence-space-id: '163842'
          confluence-parent-id: '163998'
          version: ${{ needs.version-tag.outputs.version }}
          commit-details: ${{ needs.version-tag.outputs.commit_details }}
