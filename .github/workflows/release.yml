name: Deploy and Release Workflow

on:
  push:
    branches: [master, add/gh-action-prod]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Check Node.js Version
        run: node --version

  version-tag:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      version: ${{ steps.version.outputs.version }}
      publish_docs: ${{ steps.check_commits.outputs.publish_docs }}
      append_notes: ${{ steps.check_commits.outputs.append_notes }}
      commit_details: ${{ steps.check_commits.outputs.commit_details }}
    steps:          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Determine if rerun
        id: check_rerun
        run: |
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "This is a rerun"
            echo "::set-output name=rerun::true"
          else
            echo "This is a fresh run"
            echo "::set-output name=rerun::false"
          fi

      - name: Version Tagging
        if: steps.check_rerun.outputs.rerun == 'false'
        id: version
        uses: Agrim-V/qoala-tools/version-tagging-action@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check commit messages for keywords
        id: check_commits
        run: |
          PUBLISH_DOCS=false
          APPEND_NOTES=false
          COMMIT_DETAILS=""
          for COMMIT in $(git rev-list ${{ github.event.before }}..${{ github.sha }}); do
            COMMIT_MESSAGE=$(git log -1 --pretty=%s $COMMIT)
            COMMIT_DETAILS="${COMMIT_DETAILS}\n- ${COMMIT_MESSAGE}"
            if echo "$COMMIT_MESSAGE" | grep -E "feat:|break:"; then
              PUBLISH_DOCS=true
            fi
            if echo "$COMMIT_MESSAGE" | grep -E "fix:"; then
              APPEND_NOTES=true
            fi
          done
          COMMIT_DETAILS=$(echo -e "$COMMIT_DETAILS" | sed '/^$/d' | sed 's/,/\\,/g' | sed 's/:/\\:/g')
          echo "::set-output name=publish_docs::$PUBLISH_DOCS"
          echo "::set-output name=append_notes::$APPEND_NOTES"
          echo "::set-output name=commit_details::$(echo "$COMMIT_DETAILS" | sed ':a;N;$!ba;s/\n/\\n/g')"
        shell: bash

  create-confluence-page:
    runs-on: ubuntu-latest
    needs: version-tag
    if: needs.version-tag.outputs.publish_docs == 'true'
    steps:
      - name: Create Confluence Page
        uses: Agrim-V/qoala-tools/create-confluence-page-action@main
        with:
          confluence-email: ${{ secrets.CONFLUENCE_EMAIL }}
          confluence-api-token: ${{ secrets.CONFLUENCE_API_TOKEN }}
          version: ${{ needs.version-tag.outputs.version }}
          commit-details: ${{ needs.version-tag.outputs.commit_details }}

  append-fix-notes:
    runs-on: ubuntu-latest
    needs: version-tag
    if: needs.version-tag.outputs.append_notes == 'true'
    steps:
      - name: Append Fix Notes to Confluence
        uses: Agrim-V/qoala-tools/append-fix-notes-action@main
        with:
          confluence-email: ${{ secrets.CONFLUENCE_EMAIL }}
          confluence-api-token: ${{ secrets.CONFLUENCE_API_TOKEN }}
          version: ${{ needs.version-tag.outputs.version }}
          commit-details: ${{ needs.version-tag.outputs.commit_details }}
